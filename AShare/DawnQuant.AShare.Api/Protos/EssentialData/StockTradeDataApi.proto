syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "Protos/EssentialData/Common.proto";
import "google/protobuf/empty.proto";


option csharp_namespace = "DawnQuant.AShare.Api.EssentialData";

package DawnQuant.AShare.Api.EssentialData;


// 股票交易数据
service StockTradeDataApi {
 
 rpc SaveStockTradeData(SaveStockTradeDataRequest) returns (google.protobuf.Empty);

 
 //一次性保存所有数据交易数据
 rpc SaveAllStockTradeData(SaveAllStockTradeDataRequest) returns (google.protobuf.Empty);


 //增量保存交易数据并计算复权因子
 rpc SaveInSTDAndCAF(SaveInSTDAndCAFRequest) returns (google.protobuf.Empty);

 rpc GetTradeData(GetTradeDataRequest) returns (stream  GetTradeDataResponse);

 rpc GetLatestTradeData(GetLatestTradeDataRequest) returns (GetLatestTradeDataResponse);

 //计算全部股票复权因子
 rpc CalculateAllAdjustFactor(CalculateAllAdjustFactorRequest) returns (stream CalculateAllAdjustFactorResponse);

 //增量计算股票复权因子
 rpc CalculateInsAdjustFactor(CalculateInsAdjustFactorRequest) returns (stream CalculateInsAdjustFactorResponse);

 //同步换手率指标
 rpc SyncTurnover(google.protobuf.Empty) returns (stream SyncTurnoverResponse);

  //增量同步换手率指标
 rpc InSyncTurnover(google.protobuf.Empty) returns (stream InSyncTurnoverResponse);

   //数据清洗
 rpc DataCleaning(google.protobuf.Empty) returns (stream DataCleaningResponse);

}

message SaveStockTradeDataRequest
{
    string TSCode=1;
    KCycleDto KCycle=2;
    repeated StockTradeDataDto Entities=3;
    
}

message SaveAllStockTradeDataRequest
{
    string TSCode=1;
    KCycleDto KCycle=2;
    repeated StockTradeDataDto Entities=3;
}

message SaveInSTDAndCAFRequest
{
     string TSCode=1;
     KCycleDto KCycle=2;
     StockTradeDataDto Entity=3;
}
message  GetTradeDataRequest
{
    string TSCode=1;
    KCycleDto KCycle=2;
    google.protobuf.Timestamp StartDateTime =4;
    google.protobuf.Timestamp EndDateTime =5;
}


message GetTradeDataResponse
{
repeated StockTradeDataDto Entities=1;
}


message GetLatestTradeDataRequest
{
    string TSCode=1;
    KCycleDto KCycle=2;
    int32 Size=3;
    AdjustedStateDto  AdjustedState=4;
}

message GetLatestTradeDataResponse
{
repeated StockTradeDataDto Entities=1;
}


message CalculateAllAdjustFactorRequest
{
    //原始数据支持支 日线 5分钟
    KCycleDto KCycle=1;
}

message CalculateInsAdjustFactorRequest
{
 //原始数据支持支 日线 5分钟
    KCycleDto KCycle=1;
}

message StockTradeDataDto
{
        /// 开盘价
         double Open =1;

        /// 收盘价
         double Close =2;

        /// 昨日收盘价
         double PreClose =3;

        /// 最高价
         double High =4;

        ///  最低价
         double Low =5;

        /// 成交量
         double Volume =6;

        /// 成交额
         double Amount =7;

         double Turnover=8;

         double TurnoverFree=9;

          ///复权因子
         double AdjustFactor =10;

        /// 交易时间
         google.protobuf.Timestamp TradeDateTime =11;

        
}

message CalculateInsAdjustFactorResponse
{
    string Message=1;
}

message CalculateAllAdjustFactorResponse
{
    string Message=1;
}

message SyncTurnoverResponse
{
    string Message=1;
}


message InSyncTurnoverResponse
{
    string Message=1;
}

message DataCleaningResponse
{
    string Message=1;
}

